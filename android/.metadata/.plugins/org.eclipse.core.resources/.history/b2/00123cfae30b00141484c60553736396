package com.hurix.epubRnD.Views;

import java.util.ArrayList;

import com.hurix.epubRnD.Constants.GlobalConstants;
import com.hurix.epubRnD.Settings.GlobalSettings;
import com.hurix.epubRnD.VOs.ChapterVO;

import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Bitmap;
import android.util.AttributeSet;
import android.view.View;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.webkit.WebSettings.LayoutAlgorithm;

public class HelperViewForPageCount extends WebView {
	private PageCountListener _listener;

	public HelperViewForPageCount(Context context) {
		super(context);
		init(context);
	}

	public HelperViewForPageCount(Context context, AttributeSet attrs) {
		super(context, attrs);
		init(context);
	}

	public HelperViewForPageCount(Context context, AttributeSet attrs,
			int defStyle) {
		super(context, attrs, defStyle);
		init(context);
	}

	public interface PageCountListener {
		public abstract void onPageCountComplete(int count);
	}
	
	@SuppressLint({ "NewApi", "SetJavaScriptEnabled" })
	private void init(Context context) {
		if(android.os.Build.VERSION.SDK_INT>=android.os.Build.VERSION_CODES.HONEYCOMB)
		{
			getSettings().setAllowContentAccess(true);
		}
		
		setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);
		getSettings().setLayoutAlgorithm(LayoutAlgorithm.NORMAL);
		getSettings().setMinimumFontSize(GlobalConstants.MIN_FONT_SIZE);
		getSettings().setJavaScriptEnabled(true);
		getSettings().setDefaultFontSize(GlobalSettings.FONT_SIZE);
		getSettings().setAllowFileAccess(true);
		
		setHorizontalScrollBarEnabled(false);
		setVerticalScrollBarEnabled(false);
		if(android.os.Build.VERSION.SDK_INT>=android.os.Build.VERSION_CODES.JELLY_BEAN)
		{
			getSettings().setAllowUniversalAccessFromFileURLs(true);
		}
	}

	public void startPageCounting(PageCountListener listener, ArrayList<ChapterVO> chaptersColl) {
		_listener = listener;
	}

	private class MyWebClient extends WebViewClient
	{
		@Override
		public void onPageStarted(WebView view, String url, Bitmap favicon) {
			// TODO Auto-generated method stub
			//	GlobalConstants.ENABLE_WEB_VIEW_TOUCH = false;
			super.onPageStarted(view, url, favicon);
		}
		@Override
		public void onPageFinished(WebView view, String url) 
		{
			super.onPageFinished(view, url);

			final MyWebView myWebView = (MyWebView) view;

			if(GlobalSettings.EPUB_TYPE==GlobalConstants.REFLOWABLE)
			{
				String varMySheet = "var mySheet = document.styleSheets[0];";

				String addCSSRule = "function addCSSRule(selector, newRule) {"
						+ "ruleIndex = mySheet.cssRules.length;"
						+ "mySheet.insertRule(selector + '{' + newRule + ';}', ruleIndex);"

						+ "}";

				String insertRule1 = "addCSSRule('html', 'padding: 0px; height: "
						+ (myWebView.getMeasuredHeight()/getContext().getResources().getDisplayMetrics().density )
						+ "px; -webkit-column-gap: 0px; -webkit-column-width: "
						+ myWebView.getMeasuredWidth() + "px;')";

				String insertRule2 = "addCSSRule('p', 'text-align: justify;')";

				//String setImageRule = "addCSSRule('img', 'max-width: "+  (myWebView.getMeasuredWidth() -200)+"px; height:"+(myWebView.getMeasuredHeight() - 200)+"px')";

				myWebView.loadUrl("javascript:" + varMySheet);
				myWebView.loadUrl("javascript:" + addCSSRule);
				myWebView.loadUrl("javascript:" + insertRule1);
				myWebView.loadUrl("javascript:" + insertRule2);
				//myWebView.loadUrl("javascript:" + setImageRule);
				String data = "{\"MethodName\":\"paginationDone\",\"MethodArguments\":{}}";
				String callBackToNative  = "jsInterface.callNativeMethod('jstoobjc:"+data+"');";
				
				myWebView.loadUrl("javascript: "+callBackToNative);
			}
		}
	}
}
